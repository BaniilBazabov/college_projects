@startuml
abstract class abstractFactory {
    + {abstract} CreateShape(style:Style) : AbstractShape
}
class LeftEyeFactory {
    + <<override>> CreateShape(style:Style) : AbstractShape
}
class RightEyeFactory {
    + <<override>> CreateShape(style:Style) : AbstractShape
}
class LeftBrowFactory {
    + <<override>> CreateShape(style:Style) : AbstractShape
}
class RightBrowFactory {
    + <<override>> CreateShape(style:Style) : AbstractShape
}
class MouthFactory {
    + <<override>> CreateShape(style:Style) : AbstractShape
}
abstractFactory <|-- LeftEyeFactory
abstractFactory <|-- RightEyeFactory
abstractFactory <|-- LeftBrowFactory
abstractFactory <|-- RightBrowFactory
abstractFactory <|-- MouthFactory
abstract class styleFactory {
    + {abstract} giveStyle(sake:string) : Style
}
class CreateStyle {
    + <<override>> giveStyle(s:string) : Style
}
styleFactory <|-- CreateStyle
class Caretaker {
    + Caretaker(originator:Originator)
    + Backup() : void
    + Undo() : void
    + Redo() : void
}
@enduml
